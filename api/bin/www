var app = require('../app'),
    fs = require('fs'),
    http = require('http'),
    appcfg = require('../src/com.app.configuration/appConf.json'),
    debug = require('debug')('movie:server'),
    logger = require('../src/com.app.utils/logHandler').Logger;


const port = normalizePort(process.env.PORT || appcfg.application.port);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app); //Only disable when cert/key is available.

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code.toLowerCase()) {
        case 'eacces':
            logger.console(bind + ' requires elevated privileges');
            process.exit(1);
        case 'eaddrinuse':
            logger.console(bind + ' is already in use');
            process.exit(1);
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;

    var env;
    switch (appcfg.application.isProduction) {
        case false:
            env = 'development';
            break;
        case true:
            env = 'production';
            break;
    }
    logger.console(env + ' environment ...listening on ' + bind);
    debug('Listening on ' + bind);
}